{"version":3,"sources":["ZoneAdder.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["ZoneAdder","props","addToZones","useState","show","toggle","selectedTimezone","setSelectedTimezone","className","onClick","icon","faPlus","isOpen","onSubmit","e","event","preventDefault","title","target","elements","value","setTime","htmlFor","type","name","id","style","background","onChange","App","local","dateTime","DateTime","now","isLocal","currentZones","setCurrentZones","useEffect","zoneList","localStorage","getItem","JSON","parse","key","fromISO","setZone","interval","setInterval","nextZones","map","clockBlock","newZone","zoneName","clearInterval","removeZone","filter","zone","setItem","stringify","sortedZones","sort","a","b","offset","fontSize","iana","newtz","zones","concat","index","close","ClockBlock","val","toFormat","faTimesCircle","renderNumbers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.518cb85e.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FormEvent, useState } from \"react\";\nimport TimezoneSelect, { TimezoneSelectOption } from \"react-timezone-select\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from 'react-modal';\n\n\n\ninterface Props {\n\taddToZones: (iana: string, title: string) => void;\n}\n\nfunction ZoneAdder(props: Props) {\n\tconst { addToZones } = props;\n\tconst [show, toggle] = useState(false);\n\tconst [selectedTimezone, setSelectedTimezone] = useState<TimezoneSelectOption | string>('')\n\t\n\t  \n\tfunction setTime(event: FormEvent) {\n\t\tevent.preventDefault();\n\t\ttoggle(false);\n\t\t// @ts-ignore\n\t\tconst title = event.target.elements[0].value\n\t\taddToZones(typeof selectedTimezone !== \"string\" ? selectedTimezone.value : '', title);\n\t}\n\n\treturn (\n\t\t<>\n\t\t<button className=\"button icon\" onClick={() => toggle(!show)}>\n\t\t\t<FontAwesomeIcon icon={faPlus} />\n\t\t</button>\n\t\t<Modal isOpen={show}>\n\t\t\t<form onSubmit={(e) => setTime(e)}>\n\t\t\t<label htmlFor=\"clock-title\">\n\t\t\t\tClock Title\n\t\t\t\t<input type=\"text\" name=\"clock-title\" id=\"clock-title\"/>\n\t\t\t</label>\n\t\t\t<TimezoneSelect\n\t\t\t\tstyle={{background: \"#4400bb\"}}\n\t\t\t\tvalue={selectedTimezone}\n\t\t\t\tonChange={setSelectedTimezone}\n\t\t\t/>\n\t\t\t<button>Add it</button>\n\t\t\t</form>\n\t\t</Modal>\n\t\t</>\n\t);\n}\n\nexport default ZoneAdder;","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"./ClockBlock.css\";\nimport \"./ZoneAdder.css\";\nimport \"bulma\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Clock from \"react-clock\";\nimport \"react-clock/dist/Clock.css\";\nimport { DateTime } from \"luxon\";\nimport ZoneAdder from \"./ZoneAdder\";\nimport { IClockBlock, TClockBlock } from \"./interfaces\";\n\nfunction App() {\n\tconst local: IClockBlock = {\n\t\ttitle: \"Local\",\n\t\tdateTime: DateTime.now(),\n\t\tisLocal: true\n\t}\n\tconst [currentZones, setCurrentZones] = useState<Array<IClockBlock>>([local]);\n\n\tuseEffect(() => {\n\t\tconst zoneList = localStorage.getItem(\"zoneList\");\n\t\tif(zoneList) {\n\t\t\tsetCurrentZones(JSON.parse(zoneList, (key, value)=>{\n\t\t\t\tif(key === \"dateTime\") {\n\t\t\t\t\t// @todo preserve the iana in setLocal and use that here\n\t\t\t\t\tconst datetime = DateTime.fromISO(value, {setZone: true});\n\t\t\t\t\treturn datetime\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}))\n\t\t}\n\t\t\n\t}, [])\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\t\n\t\t\tconst nextZones = currentZones.map((clockBlock) => {\n\t\t\t\tconst now = DateTime.now();\n\t\t\t\tconst newZone = now.setZone(clockBlock.dateTime.zoneName);\n\t\t\t\treturn {...clockBlock, dateTime: newZone};\n\t\t\t});\n\t\t\tsetCurrentZones(nextZones);\n\t\t}, 1000);\n\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t}, [currentZones]);\n\n\tconst addNewZone = (iana: string, title: string) => {\n\n\t\tconst newtz = { \n\t\t\tdateTime: DateTime.now().setZone(iana), \n\t\t\ttitle\n\t\t};\n\t\tconst zones = currentZones.concat([newtz])\n\t\tdebugger\n\t\tsetCurrentZones(zones);\n\t\t\n\t\tlocalStorage.setItem(\"zoneList\", JSON.stringify(zones));\n\t};\n\n\tconst removeZone = (clockBlock:DateTime) => {\n\t\tconst nextZones = currentZones.filter((zone) => zone.dateTime !== clockBlock)\n\t\tsetCurrentZones(nextZones);\n\t\tlocalStorage.setItem(\"zoneList\", JSON.stringify(nextZones))\n\t}\n\n\tconst sortedZones = [...currentZones].sort((a, b) => a.dateTime.offset - b.dateTime.offset);\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<h1 style={{fontSize: \"2rem\"}}>Times Owner</h1>\n\t\t\t</header>\n\t\t\t<main>\n\t\t\t\t<section className=\"upper\">\t\t\t\t\t\n\t\t\t\t\t<ZoneAdder addToZones={addNewZone} />\n\t\t\t\t\t<ul className=\"bar\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t{sortedZones.map((clockBlock, index) => (\n\t\t\t\t\t\t\t<ClockBlock\n\t\t\t\t\t\t\t\tkey={`${clockBlock.dateTime.zoneName}-${index}`}\n\t\t\t\t\t\t\t\t{...clockBlock}\n\t\t\t\t\t\t\t\tclose={removeZone}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</section>\n\t\t\t\t<hr/>\n\t\t\t\t<section></section>\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\nfunction ClockBlock(props: TClockBlock) {\n\tconst { dateTime, title, isLocal, close } = props;\n\t\n\tconst val = dateTime.toFormat(\"HH:mm:ss\");\n\t\n\treturn (\n\t\t<li className=\"ClockBlock box\" style={isLocal ? {background: \"#bfefff\"}: {}}>\n\t\t\t<header><h2>{title}</h2>\n\t\t\t{!isLocal && <button className=\"button icon\" onClick={() => {close(dateTime)}}>\n\t\t\t\t<FontAwesomeIcon icon={faTimesCircle} />\n\t\t\t</button>}\n\t\t\t</header>\n\t\t\t\n\t\t\t<Clock value={val} renderNumbers={true} />\n\t\t\t<p>{dateTime.zoneName}</p>\n\t\t</li>\n\t);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}